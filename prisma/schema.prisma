// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Project {
  id          Int               @id() @default(autoincrement())
  name        String            @unique()
  alias       String
  githubUrl   String?
  url         String?
  imageUrl    String            @db.LongText
  description String?
  visibility  String?
  updatedAt   DateTime          @updatedAt()
  createdAt   DateTime          @default(now())
  commits     ProjectCommit[]
  languages   ProjectLanguage[]
  tags        ProjectTag[]
}

model ProjectCommit {
  id         String    @id
  projectId  Int
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createDate DateTime?
  authorName String?
  updatedAt  DateTime  @updatedAt()
  createdAt  DateTime  @default(now())

  @@unique([id, projectId])
  @@index(fields: [projectId])
}

model ProjectLanguage {
  projectId         Int
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name              String
  codeAmountInBytes Int
  updatedAt         DateTime @updatedAt()
  createdAt         DateTime @default(now())

  @@unique([projectId, name])
}

model ProjectTag {
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name      String
  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())

  @@unique([projectId, name])
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_in        Int?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GithubRepo {
  id   Int    @id @default(autoincrement())
  name String
}
