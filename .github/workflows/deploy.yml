name: deploy

on:
    push:
        branches:
            - main

concurrency:
    group: deployment
    cancel-in-progress: true

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_CLI_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_CLI_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_CLI_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
              with:
                  mask-password: "true"

            - name: Build, tag, and push `cron-jobs` image to Amazon ECR
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_ECR_REGION }}
                  ECR_REPO_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com/portfolio-cron-jobs
                  BUILD_IMAGE_NAME: portfolio-cron-jobs
              run: |
                  cd cron-jobs
                  docker compose --file docker-compose.build.yml build 
                  docker tag $BUILD_IMAGE_NAME $ECR_REPO_URL
                  docker push $ECR_REPO_URL

            - name: create .env file for building `frontend` image
              run: |
                  echo "BASE_URL=${{secrets.BASE_URL}}" >> docker/.env
                  echo "NEXT_PUBLIC_BASE_URL=${{secrets.NEXT_PUBLIC_BASE_URL}}" >> docker/.env
                  echo "NEXT_PUBLIC_GITHUB_PROFILE_URL=${{secrets.NEXT_PUBLIC_GITHUB_PROFILE_URL}}" >> docker/.env
                  echo "NEXT_PUBLIC_CONTACT_RECIPIENT=${{secrets.NEXT_PUBLIC_CONTACT_RECIPIENT}}" >> docker/.env
                  echo "NEXT_PUBLIC_LINKEDIN_PROFILE_URL=${{secrets.NEXT_PUBLIC_LINKEDIN_PROFILE_URL}}" >> docker/.env

            - name: Build, tag, and push `frontend` image to Amazon ECR
              env:
                  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_ECR_REGION }}
                  ECR_REPO_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com/portfolio
                  BUILD_IMAGE_NAME: portfolio
              run: |
                  cd docker
                  docker compose --file docker-compose.build.yml build 
                  docker tag $BUILD_IMAGE_NAME $ECR_REPO_URL
                  docker push $ECR_REPO_URL
    deploy:
        needs: build
        runs-on: ubuntu-latest
        env:
            APP_PATH: /usr/web-services/portfolio/
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: copy necessary files for starting docker container into vps
              uses: appleboy/scp-action@v0.1.7
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: ${{ secrets.VPS_USERNAME }}
                  key: ${{ secrets.VPS_PRIVATE_KEY }}
                  port: 22
                  source: docker/server/
                  target: ${{env.APP_PATH}}
                  strip_components: 2

            - name: start `cron-jobs` application
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: ${{ secrets.VPS_USERNAME }}
                  key: ${{ secrets.VPS_PRIVATE_KEY }}
                  port: 22
                  script: |
                      aws ecr get-login-password --region ${{ secrets.AWS_ECR_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_ECR_REGION }}.amazonaws.com
                      cd ${{env.APP_PATH}}/cron-jobs
                      docker stop cron-jobs
                      docker rm cron-jobs
                      docker compose -f docker/docker-compose.yml pull
                      docker compose -f docker/docker-compose.yml up -d

            - name: start `frontend` application
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: ${{ secrets.VPS_USERNAME }}
                  key: ${{ secrets.VPS_PRIVATE_KEY }}
                  port: 22
                  script: |
                      aws ecr get-login-password --region ${{ secrets.AWS_ECR_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_ECR_REGION }}.amazonaws.com
                      cd ${{env.APP_PATH}}/frontend
                      docker stop frontend
                      docker rm frontend
                      docker compose -f docker/docker-compose.yml pull
                      docker compose -f docker/docker-compose.yml up -d
